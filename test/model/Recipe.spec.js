/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CheeryChowRecipeApi);
  }
}(this, function(expect, CheeryChowRecipeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CheeryChowRecipeApi.Recipe();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Recipe', function() {
    it('should create an instance of Recipe', function() {
      // uncomment below and update the code to test Recipe
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be.a(CheeryChowRecipeApi.Recipe);
    });

    it('should have the property internalPreloadOptions (base name: "internal_preload_options")', function() {
      // uncomment below and update the code to test the property internalPreloadOptions
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property numMatchingIngredients (base name: "num_matching_ingredients")', function() {
      // uncomment below and update the code to test the property numMatchingIngredients
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property numMissingIngredients (base name: "num_missing_ingredients")', function() {
      // uncomment below and update the code to test the property numMissingIngredients
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property uniqueUrlId (base name: "unique_url_id")', function() {
      // uncomment below and update the code to test the property uniqueUrlId
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property uniqueUrlName (base name: "unique_url_name")', function() {
      // uncomment below and update the code to test the property uniqueUrlName
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property added (base name: "added")', function() {
      // uncomment below and update the code to test the property added
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property averageRating (base name: "average_rating")', function() {
      // uncomment below and update the code to test the property averageRating
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property bestRating (base name: "best_rating")', function() {
      // uncomment below and update the code to test the property bestRating
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property cookTime (base name: "cook_time")', function() {
      // uncomment below and update the code to test the property cookTime
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property cuisine (base name: "cuisine")', function() {
      // uncomment below and update the code to test the property cuisine
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property foodIds (base name: "food_ids")', function() {
      // uncomment below and update the code to test the property foodIds
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property foodNames (base name: "food_names")', function() {
      // uncomment below and update the code to test the property foodNames
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "image_url")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property info (base name: "info")', function() {
      // uncomment below and update the code to test the property info
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property ingredientCommonNames (base name: "ingredient_common_names")', function() {
      // uncomment below and update the code to test the property ingredientCommonNames
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property ingredients (base name: "ingredients")', function() {
      // uncomment below and update the code to test the property ingredients
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property instructions (base name: "instructions")', function() {
      // uncomment below and update the code to test the property instructions
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property mealType (base name: "meal_type")', function() {
      // uncomment below and update the code to test the property mealType
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property numIngredients (base name: "num_ingredients")', function() {
      // uncomment below and update the code to test the property numIngredients
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property nutrition (base name: "nutrition")', function() {
      // uncomment below and update the code to test the property nutrition
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property nutritionPerPortion (base name: "nutrition_per_portion")', function() {
      // uncomment below and update the code to test the property nutritionPerPortion
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property oid (base name: "oid")', function() {
      // uncomment below and update the code to test the property oid
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "owner_id")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property portions (base name: "portions")', function() {
      // uncomment below and update the code to test the property portions
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property prepTime (base name: "prep_time")', function() {
      // uncomment below and update the code to test the property prepTime
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property provides (base name: "provides")', function() {
      // uncomment below and update the code to test the property provides
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property ratingCount (base name: "rating_count")', function() {
      // uncomment below and update the code to test the property ratingCount
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property recipeId (base name: "recipe_id")', function() {
      // uncomment below and update the code to test the property recipeId
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property recipeYield (base name: "recipe_yield")', function() {
      // uncomment below and update the code to test the property recipeYield
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property scratch (base name: "scratch")', function() {
      // uncomment below and update the code to test the property scratch
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property uniqueName (base name: "unique_name")', function() {
      // uncomment below and update the code to test the property uniqueName
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

    it('should have the property worstRating (base name: "worst_rating")', function() {
      // uncomment below and update the code to test the property worstRating
      //var instane = new CheeryChowRecipeApi.Recipe();
      //expect(instance).to.be();
    });

  });

}));
