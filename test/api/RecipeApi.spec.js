/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CheeryChowRecipeApi);
  }
}(this, function(expect, CheeryChowRecipeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CheeryChowRecipeApi.RecipeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecipeApi', function() {
    describe('copyRecipeExactly', function() {
      it('should call copyRecipeExactly successfully', function(done) {
        //uncomment below and update the code to test copyRecipeExactly
        //instance.copyRecipeExactly(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyRecipeToMyRecipesWithChanges', function() {
      it('should call copyRecipeToMyRecipesWithChanges successfully', function(done) {
        //uncomment below and update the code to test copyRecipeToMyRecipesWithChanges
        //instance.copyRecipeToMyRecipesWithChanges(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRecipe', function() {
      it('should call deleteRecipe successfully', function(done) {
        //uncomment below and update the code to test deleteRecipe
        //instance.deleteRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCategoriesForRecipe', function() {
      it('should call getCategoriesForRecipe successfully', function(done) {
        //uncomment below and update the code to test getCategoriesForRecipe
        //instance.getCategoriesForRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageQRCodePNG', function() {
      it('should call getImageQRCodePNG successfully', function(done) {
        //uncomment below and update the code to test getImageQRCodePNG
        //instance.getImageQRCodePNG(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIngredientFromRecipeWithNutrition', function() {
      it('should call getIngredientFromRecipeWithNutrition successfully', function(done) {
        //uncomment below and update the code to test getIngredientFromRecipeWithNutrition
        //instance.getIngredientFromRecipeWithNutrition(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIngredientsForRecipe', function() {
      it('should call getIngredientsForRecipe successfully', function(done) {
        //uncomment below and update the code to test getIngredientsForRecipe
        //instance.getIngredientsForRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNutritionLabelHtml', function() {
      it('should call getNutritionLabelHtml successfully', function(done) {
        //uncomment below and update the code to test getNutritionLabelHtml
        //instance.getNutritionLabelHtml(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNutritionLabelImage', function() {
      it('should call getNutritionLabelImage successfully', function(done) {
        //uncomment below and update the code to test getNutritionLabelImage
        //instance.getNutritionLabelImage(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecipeCSV', function() {
      it('should call getRecipeCSV successfully', function(done) {
        //uncomment below and update the code to test getRecipeCSV
        //instance.getRecipeCSV(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecipeFoodNames', function() {
      it('should call getRecipeFoodNames successfully', function(done) {
        //uncomment below and update the code to test getRecipeFoodNames
        //instance.getRecipeFoodNames(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecipeIngredientNames', function() {
      it('should call getRecipeIngredientNames successfully', function(done) {
        //uncomment below and update the code to test getRecipeIngredientNames
        //instance.getRecipeIngredientNames(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecipeObject', function() {
      it('should call getRecipeObject successfully', function(done) {
        //uncomment below and update the code to test getRecipeObject
        //instance.getRecipeObject(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecipePNG', function() {
      it('should call getRecipePNG successfully', function(done) {
        //uncomment below and update the code to test getRecipePNG
        //instance.getRecipePNG(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecipeWithNutrition', function() {
      it('should call getRecipeWithNutrition successfully', function(done) {
        //uncomment below and update the code to test getRecipeWithNutrition
        //instance.getRecipeWithNutrition(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('latestRecipes', function() {
      it('should call latestRecipes successfully', function(done) {
        //uncomment below and update the code to test latestRecipes
        //instance.latestRecipes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIngredientsWithNutrition', function() {
      it('should call listIngredientsWithNutrition successfully', function(done) {
        //uncomment below and update the code to test listIngredientsWithNutrition
        //instance.listIngredientsWithNutrition(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pagedSearchRecipes', function() {
      it('should call pagedSearchRecipes successfully', function(done) {
        //uncomment below and update the code to test pagedSearchRecipes
        //instance.pagedSearchRecipes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRecipes', function() {
      it('should call searchRecipes successfully', function(done) {
        //uncomment below and update the code to test searchRecipes
        //instance.searchRecipes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRecipesByFoodIdsWithNutrition', function() {
      it('should call searchRecipesByFoodIdsWithNutrition successfully', function(done) {
        //uncomment below and update the code to test searchRecipesByFoodIdsWithNutrition
        //instance.searchRecipesByFoodIdsWithNutrition(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
