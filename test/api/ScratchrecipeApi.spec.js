/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CheeryChowRecipeApi);
  }
}(this, function(expect, CheeryChowRecipeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CheeryChowRecipeApi.ScratchrecipeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScratchrecipeApi', function() {
    describe('changeIngredientForScratchPadRecipe', function() {
      it('should call changeIngredientForScratchPadRecipe successfully', function(done) {
        //uncomment below and update the code to test changeIngredientForScratchPadRecipe
        //instance.changeIngredientForScratchPadRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAScratchPadRecipe', function() {
      it('should call createAScratchPadRecipe successfully', function(done) {
        //uncomment below and update the code to test createAScratchPadRecipe
        //instance.createAScratchPadRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScratchPadRecipe', function() {
      it('should call deleteScratchPadRecipe successfully', function(done) {
        //uncomment below and update the code to test deleteScratchPadRecipe
        //instance.deleteScratchPadRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMyScratchRecipes', function() {
      it('should call getAllMyScratchRecipes successfully', function(done) {
        //uncomment below and update the code to test getAllMyScratchRecipes
        //instance.getAllMyScratchRecipes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMyScratchRecipesAndNutrition', function() {
      it('should call getAllMyScratchRecipesAndNutrition successfully', function(done) {
        //uncomment below and update the code to test getAllMyScratchRecipesAndNutrition
        //instance.getAllMyScratchRecipesAndNutrition(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMyScratchRecipesSingular', function() {
      it('should call getAllMyScratchRecipesSingular successfully', function(done) {
        //uncomment below and update the code to test getAllMyScratchRecipesSingular
        //instance.getAllMyScratchRecipesSingular(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNutritionForSpecificScratchRecipe', function() {
      it('should call getNutritionForSpecificScratchRecipe successfully', function(done) {
        //uncomment below and update the code to test getNutritionForSpecificScratchRecipe
        //instance.getNutritionForSpecificScratchRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScratchRecipeIngredientNames', function() {
      it('should call getScratchRecipeIngredientNames successfully', function(done) {
        //uncomment below and update the code to test getScratchRecipeIngredientNames
        //instance.getScratchRecipeIngredientNames(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putScratchPadRecipe', function() {
      it('should call putScratchPadRecipe successfully', function(done) {
        //uncomment below and update the code to test putScratchPadRecipe
        //instance.putScratchPadRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeIngredientFromScratchPadRecipe', function() {
      it('should call removeIngredientFromScratchPadRecipe successfully', function(done) {
        //uncomment below and update the code to test removeIngredientFromScratchPadRecipe
        //instance.removeIngredientFromScratchPadRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveIngredientsInScratchRecipe', function() {
      it('should call saveIngredientsInScratchRecipe successfully', function(done) {
        //uncomment below and update the code to test saveIngredientsInScratchRecipe
        //instance.saveIngredientsInScratchRecipe(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
