/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Recipe', 'model/HttpAPIError', 'model/RecipeserverBasicauthHttpAPIResponse', 'model/IngredientWithNutritionAbbrev', 'model/Ingredient', 'model/FoodWithID', 'model/PagedRecipeResults'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Recipe'), require('../model/HttpAPIError'), require('../model/RecipeserverBasicauthHttpAPIResponse'), require('../model/IngredientWithNutritionAbbrev'), require('../model/Ingredient'), require('../model/FoodWithID'), require('../model/PagedRecipeResults'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.RecipeApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.Recipe, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.RecipeserverBasicauthHttpAPIResponse, root.CheeryChowRecipeApi.IngredientWithNutritionAbbrev, root.CheeryChowRecipeApi.Ingredient, root.CheeryChowRecipeApi.FoodWithID, root.CheeryChowRecipeApi.PagedRecipeResults);
  }
}(this, function(ApiClient, Recipe, HttpAPIError, RecipeserverBasicauthHttpAPIResponse, IngredientWithNutritionAbbrev, Ingredient, FoodWithID, PagedRecipeResults) {
  'use strict';

  /**
   * Recipe service.
   * @module api/RecipeApi
   * @version 0.0.2
   */

  /**
   * Constructs a new RecipeApi. 
   * @alias module:api/RecipeApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the copyRecipeExactly operation.
     * @callback module:api/RecipeApi~copyRecipeExactlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to make a copy of a recipe, which you&#39;re free to make changes to as if it were your own.
     * @param {Integer} recipeId The recipe you want to make changes to
     * @param {module:api/RecipeApi~copyRecipeExactlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.copyRecipeExactly = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling copyRecipeExactly";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/copy/{recipeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyRecipeToMyRecipesWithChanges operation.
     * @callback module:api/RecipeApi~copyRecipeToMyRecipesWithChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to make a copy of a recipe, which you&#39;re free to make changes to as if it were your own.
     * @param {Integer} recipeId The recipe you want to make changes to
     * @param {module:model/Recipe} recipe The recipe object with changes you want to make to the original recipe.
     * @param {module:api/RecipeApi~copyRecipeToMyRecipesWithChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.copyRecipeToMyRecipesWithChanges = function(recipeId, recipe, callback) {
      var postBody = recipe;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling copyRecipeToMyRecipesWithChanges";
      }

      // verify the required parameter 'recipe' is set
      if (recipe == undefined || recipe == null) {
        throw "Missing the required parameter 'recipe' when calling copyRecipeToMyRecipesWithChanges";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/copy/{recipeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecipe operation.
     * @callback module:api/RecipeApi~deleteRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeserverBasicauthHttpAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one of your recipes
     * @param {Integer} recipeId Recipe ID
     * @param {module:api/RecipeApi~deleteRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeserverBasicauthHttpAPIResponse}
     */
    this.deleteRecipe = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling deleteRecipe";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeserverBasicauthHttpAPIResponse;

      return this.apiClient.callApi(
        '/recipe/{recipeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoriesForRecipe operation.
     * @callback module:api/RecipeApi~getCategoriesForRecipeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the categories the food belongs to
     * @param {Integer} recipeId Recipe ID
     * @param {module:api/RecipeApi~getCategoriesForRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getCategoriesForRecipe = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getCategoriesForRecipe";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/recipe/{recipeId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageQRCodePNG operation.
     * @callback module:api/RecipeApi~getImageQRCodePNGCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the QR code image
     * @param {Integer} recipeId The recipe ID of the recipe which the image is to be fetched.
     * @param {module:api/RecipeApi~getImageQRCodePNGCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getImageQRCodePNG = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getImageQRCodePNG";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/recipe/{recipeId}/qr-image/png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIngredientFromRecipeWithNutrition operation.
     * @callback module:api/RecipeApi~getIngredientFromRecipeWithNutritionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngredientWithNutritionAbbrev} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular ingredient in a recipe.
     * @param {Integer} recipeId The recipe ID
     * @param {Integer} ingredientId The ingredient ID, if you want a particular ingredient in the recipe.
     * @param {module:api/RecipeApi~getIngredientFromRecipeWithNutritionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngredientWithNutritionAbbrev}
     */
    this.getIngredientFromRecipeWithNutrition = function(recipeId, ingredientId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getIngredientFromRecipeWithNutrition";
      }

      // verify the required parameter 'ingredientId' is set
      if (ingredientId == undefined || ingredientId == null) {
        throw "Missing the required parameter 'ingredientId' when calling getIngredientFromRecipeWithNutrition";
      }


      var pathParams = {
        'recipeId': recipeId,
        'ingredient-id': ingredientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IngredientWithNutritionAbbrev;

      return this.apiClient.callApi(
        '/recipe/{recipeId}/ingredient/{ingredient-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIngredientsForRecipe operation.
     * @callback module:api/RecipeApi~getIngredientsForRecipeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ingredient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular recipe&#39;s ingredients.
     * @param {Integer} recipeId The recipe ID
     * @param {module:api/RecipeApi~getIngredientsForRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ingredient>}
     */
    this.getIngredientsForRecipe = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getIngredientsForRecipe";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Ingredient];

      return this.apiClient.callApi(
        '/recipe/{recipeId}/ingredient', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNutritionLabelHtml operation.
     * @callback module:api/RecipeApi~getNutritionLabelHtmlCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get HTML source which draws a dynamic (javascript operated) version of the nutrition label
     * @param {Integer} recipeId The recipe ID which the nutritional label should be calculated from.
     * @param {Object} opts Optional parameters
     * @param {String} opts.country The country code which the RDA should reflect. (default to uk)
     * @param {String} opts.gender The gender for which the RDA should apply. (default to male)
     * @param {module:api/RecipeApi~getNutritionLabelHtmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.getNutritionLabelHtml = function(recipeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getNutritionLabelHtml";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
        'country': opts['country'],
        'gender': opts['gender']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/html'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/recipe/{recipeId}/nutrition-label/html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNutritionLabelImage operation.
     * @callback module:api/RecipeApi~getNutritionLabelImageCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a PNG of the nutrition label
     * @param {Integer} recipeId The recipe ID which the nutritional label should be calculated from.
     * @param {Object} opts Optional parameters
     * @param {String} opts.country The country code which the RDA should reflect. (default to uk)
     * @param {String} opts.gender The gender for which the RDA should apply. (default to male)
     * @param {module:api/RecipeApi~getNutritionLabelImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.getNutritionLabelImage = function(recipeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getNutritionLabelImage";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
        'country': opts['country'],
        'gender': opts['gender']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['image/png'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/recipe/{recipeId}/nutrition-label/png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeCSV operation.
     * @callback module:api/RecipeApi~getRecipeCSVCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a detailed CSV file from a Recipe. Includes data on the calories per portion, and calorie for each ingredient in the recipe.
     * @param {Integer} recipeId The recipe ID which the nutritional label should be calculated from.
     * @param {Object} opts Optional parameters
     * @param {String} opts.country The country code which the RDA should reflect. (default to uk)
     * @param {String} opts.gender The gender for which the RDA should apply. (default to male)
     * @param {module:api/RecipeApi~getRecipeCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getRecipeCSV = function(recipeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getRecipeCSV";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
        'country': opts['country'],
        'gender': opts['gender']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/csv'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/recipe/{recipeId}/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeFoodNames operation.
     * @callback module:api/RecipeApi~getRecipeFoodNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FoodWithID>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a recipe object&#39;s food names
     * @param {Integer} recipeId Recipe id
     * @param {module:api/RecipeApi~getRecipeFoodNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FoodWithID>}
     */
    this.getRecipeFoodNames = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getRecipeFoodNames";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FoodWithID];

      return this.apiClient.callApi(
        '/recipe/{recipeId}/food', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeIngredientNames operation.
     * @callback module:api/RecipeApi~getRecipeIngredientNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the common names for a particular recipe
     * @param {Integer} recipeId Recipe ID
     * @param {module:api/RecipeApi~getRecipeIngredientNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getRecipeIngredientNames = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getRecipeIngredientNames";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/recipe/{recipeId}/ingredient-names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeObject operation.
     * @callback module:api/RecipeApi~getRecipeObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a recipe object and include the total recipe nutrition
     * @param {Integer} recipeId Recipe id
     * @param {module:api/RecipeApi~getRecipeObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.getRecipeObject = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getRecipeObject";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/{recipeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipePNG operation.
     * @callback module:api/RecipeApi~getRecipePNGCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the URL for a recipe&#39;s image
     * @param {Integer} recipeId The recipe ID of the recipe which the image is to be fetched.
     * @param {module:api/RecipeApi~getRecipePNGCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRecipePNG = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getRecipePNG";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/recipe/{recipeId}/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeWithNutrition operation.
     * @callback module:api/RecipeApi~getRecipeWithNutritionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recipe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the recipes owned by the currently logged in or authorised user. Include the recipe&#39;s nutrition per portion.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included? (default to false)
     * @param {Boolean} opts.includeNutritionPerPortion Should the recipe&#39;s nutrition per portion be included? (default to false)
     * @param {Boolean} opts.includeGda Should the general daily provision for the recipe be included? (default to false)
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name) (default to false)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name. (default to false)
     * @param {Integer} opts.offset The offset into search results.
     * @param {Integer} opts.limit Limit the number of results returned.
     * @param {module:api/RecipeApi~getRecipeWithNutritionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recipe>}
     */
    this.getRecipeWithNutrition = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-nutrition-per-portion': opts['includeNutritionPerPortion'],
        'include-gda': opts['includeGda'],
        'include-food-names': opts['includeFoodNames'],
        'include-food-id': opts['includeFoodId'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Recipe];

      return this.apiClient.callApi(
        '/recipe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the latestRecipes operation.
     * @callback module:api/RecipeApi~latestRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recipe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest recipe object (with nutrition data), and include the nutrition information for the ingredients in this object.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included? (default to false)
     * @param {Boolean} opts.includeNutritionPerPortion Should the recipe&#39;s nutrition per portion be included? (default to false)
     * @param {Boolean} opts.includeGda Should the general daily provision for the recipe be included? (default to false)
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name) (default to false)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name. (default to false)
     * @param {Integer} opts.offset The offset into search results.
     * @param {Integer} opts.limit Limit the number of results returned.
     * @param {module:api/RecipeApi~latestRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recipe>}
     */
    this.latestRecipes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-nutrition-per-portion': opts['includeNutritionPerPortion'],
        'include-gda': opts['includeGda'],
        'include-food-names': opts['includeFoodNames'],
        'include-food-id': opts['includeFoodId'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Recipe];

      return this.apiClient.callApi(
        '/recipe/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listIngredientsWithNutrition operation.
     * @callback module:api/RecipeApi~listIngredientsWithNutritionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IngredientWithNutritionAbbrev>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of ingredients in a recipe
     * @param {Integer} recipeId The recipe ID
     * @param {module:api/RecipeApi~listIngredientsWithNutritionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IngredientWithNutritionAbbrev>}
     */
    this.listIngredientsWithNutrition = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling listIngredientsWithNutrition";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [IngredientWithNutritionAbbrev];

      return this.apiClient.callApi(
        '/recipe/{recipeId}/ingredient/nutrition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pagedSearchRecipes operation.
     * @callback module:api/RecipeApi~pagedSearchRecipesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedRecipeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse up a list of plain text ingredients and produce an itemised list of foods, amounts (in grams or ml) and nutritional content of the foods. The food parsed by the sous bot may not exactly match the food the human operator intended, so other api end points are available to tweak foods and thus create a more accurate nutritional report for a recipe.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recipeName Search the recipe name, used as a wild card on the name column like so; &#39;%name%&#39;
     * @param {String} opts.fewerCalories Search for recipes that have a less than or equal to &#39;fewercalories&#39; calories per portion.
     * @param {String} opts.moreCalories Search for recipes that have a greater than &#39;morecalories&#39; calories per portion.
     * @param {String} opts.ingredient Search the list of ingredients in each recipe. The value is used as a wild card on the ingredient line as typed in by a human operator.
     * @param {String} opts.foodIds A comma separated list of food IDs which each recipe MUST contain.
     * @param {String} opts.calories A comma separated list of food IDs which each recipe MUST contain.
     * @param {String} opts.protein A comma separated list of food IDs which each recipe MUST contain.
     * @param {String} opts.totalFat A comma separated list of food IDs which each recipe MUST contain.
     * @param {Boolean} opts.vegetarian List only recipes which have ingredients that are vegetarian friendly.
     * @param {Boolean} opts.veganFriendly List only recipes which have ingredients that are vegan friendly.
     * @param {Boolean} opts.pescatarian List only recipes which have ingredients that are pescatarianfriendly.
     * @param {Boolean} opts.glutenFree List only recipes which have ingredients that are gluten free.
     * @param {Boolean} opts.quickAndEasy List only recipes which are quick and easy to cook.
     * @param {Boolean} opts.lowFat List only recipes which are low in fat.
     * @param {Boolean} opts.hasNuts List only recipes which has-nuts.
     * @param {Boolean} opts.hasEggs List only recipes which has-eggs.
     * @param {Boolean} opts.hasSugar List only recipes which has high sugar levels.
     * @param {Boolean} opts.hasFruit List only recipes which has fruit.
     * @param {Boolean} opts.hasDairy List only recipes which has dairy.
     * @param {Boolean} opts.hasMeat List only recipes which has meat (non fish meats).
     * @param {Boolean} opts.hasCeral List only recipes which has ceral.
     * @param {Boolean} opts.hasAlcohol List only recipes which has alcohol.
     * @param {Boolean} opts.sweetFood List only sweet recipes.
     * @param {Boolean} opts.savoryFood List only savory recipes.
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included? (default to false)
     * @param {Boolean} opts.includeNutritionPerPortion Should the recipe&#39;s nutrition per portion be included? (default to false)
     * @param {Boolean} opts.includeGda Should the general daily provision for the recipe be included? (default to false)
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name) (default to false)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name. (default to false)
     * @param {Integer} opts.offset The offset into search results.
     * @param {Integer} opts.limit Limit the number of results returned.
     * @param {String} opts.sortby The nutrition field to sort by. (default to calories)
     * @param {String} opts.sortdir The sort direction for the results. (default to desc)
     * @param {module:api/RecipeApi~pagedSearchRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedRecipeResults}
     */
    this.pagedSearchRecipes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'recipeName': opts['recipeName'],
        'fewerCalories': opts['fewerCalories'],
        'moreCalories': opts['moreCalories'],
        'ingredient': opts['ingredient'],
        'foodIds': opts['foodIds'],
        'calories': opts['calories'],
        'protein': opts['protein'],
        'total-fat': opts['totalFat'],
        'vegetarian': opts['vegetarian'],
        'vegan-friendly': opts['veganFriendly'],
        'pescatarian': opts['pescatarian'],
        'gluten-free': opts['glutenFree'],
        'quick-and-easy': opts['quickAndEasy'],
        'low-fat': opts['lowFat'],
        'has-nuts': opts['hasNuts'],
        'has-eggs': opts['hasEggs'],
        'has-sugar': opts['hasSugar'],
        'has-fruit': opts['hasFruit'],
        'has-dairy': opts['hasDairy'],
        'has-meat': opts['hasMeat'],
        'has-ceral': opts['hasCeral'],
        'has-alcohol': opts['hasAlcohol'],
        'sweet-food': opts['sweetFood'],
        'savory-food': opts['savoryFood'],
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-nutrition-per-portion': opts['includeNutritionPerPortion'],
        'include-gda': opts['includeGda'],
        'include-food-names': opts['includeFoodNames'],
        'include-food-id': opts['includeFoodId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sortby': opts['sortby'],
        'sortdir': opts['sortdir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedRecipeResults;

      return this.apiClient.callApi(
        '/recipe/search/paged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRecipes operation.
     * @callback module:api/RecipeApi~searchRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recipe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse up a list of plain text ingredients and produce an itemised list of foods, amounts (in grams or ml) and nutritional content of the foods. The food parsed by the sous bot may not exactly match the food the human operator intended, so other api end points are available to tweak foods and thus create a more accurate nutritional report for a recipe.
     * @param {Object} opts Optional parameters
     * @param {String} opts.recipeName Search the recipe name, used as a wild card on the name column like so; &#39;%name%&#39;
     * @param {String} opts.fewerCalories Search for recipes that have a less than or equal to &#39;fewercalories&#39; calories per portion.
     * @param {String} opts.moreCalories Search for recipes that have a greater than &#39;morecalories&#39; calories per portion.
     * @param {String} opts.ingredient Search the list of ingredients in each recipe. The value is used as a wild card on the ingredient line as typed in by a human operator.
     * @param {String} opts.foodIds A comma separated list of food IDs which each recipe MUST contain.
     * @param {String} opts.calories A comma separated list of food IDs which each recipe MUST contain.
     * @param {String} opts.protein A comma separated list of food IDs which each recipe MUST contain.
     * @param {String} opts.totalFat A comma separated list of food IDs which each recipe MUST contain.
     * @param {Boolean} opts.vegetarian List only recipes which have ingredients that are vegetarian friendly.
     * @param {Boolean} opts.veganFriendly List only recipes which have ingredients that are vegan friendly.
     * @param {Boolean} opts.pescatarian List only recipes which have ingredients that are pescatarianfriendly.
     * @param {Boolean} opts.glutenFree List only recipes which have ingredients that are gluten free.
     * @param {Boolean} opts.quickAndEasy List only recipes which are quick and easy to cook.
     * @param {Boolean} opts.lowFat List only recipes which are low in fat.
     * @param {Boolean} opts.hasNuts List only recipes which has-nuts.
     * @param {Boolean} opts.hasEggs List only recipes which has-eggs.
     * @param {Boolean} opts.hasSugar List only recipes which has high sugar levels.
     * @param {Boolean} opts.hasFruit List only recipes which has fruit.
     * @param {Boolean} opts.hasDairy List only recipes which has dairy.
     * @param {Boolean} opts.hasMeat List only recipes which has meat (non fish meats).
     * @param {Boolean} opts.hasCeral List only recipes which has ceral.
     * @param {Boolean} opts.hasAlcohol List only recipes which has alcohol.
     * @param {Boolean} opts.sweetFood List only sweet recipes.
     * @param {Boolean} opts.savoryFood List only savory recipes.
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included? (default to false)
     * @param {Boolean} opts.includeNutritionPerPortion Should the recipe&#39;s nutrition per portion be included? (default to false)
     * @param {Boolean} opts.includeGda Should the general daily provision for the recipe be included? (default to false)
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name) (default to false)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name. (default to false)
     * @param {Integer} opts.offset The offset into search results.
     * @param {Integer} opts.limit Limit the number of results returned.
     * @param {String} opts.sortby The nutrition field to sort by. (default to calories)
     * @param {String} opts.sortdir The sort direction for the results. (default to desc)
     * @param {module:api/RecipeApi~searchRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recipe>}
     */
    this.searchRecipes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'recipeName': opts['recipeName'],
        'fewerCalories': opts['fewerCalories'],
        'moreCalories': opts['moreCalories'],
        'ingredient': opts['ingredient'],
        'foodIds': opts['foodIds'],
        'calories': opts['calories'],
        'protein': opts['protein'],
        'total-fat': opts['totalFat'],
        'vegetarian': opts['vegetarian'],
        'vegan-friendly': opts['veganFriendly'],
        'pescatarian': opts['pescatarian'],
        'gluten-free': opts['glutenFree'],
        'quick-and-easy': opts['quickAndEasy'],
        'low-fat': opts['lowFat'],
        'has-nuts': opts['hasNuts'],
        'has-eggs': opts['hasEggs'],
        'has-sugar': opts['hasSugar'],
        'has-fruit': opts['hasFruit'],
        'has-dairy': opts['hasDairy'],
        'has-meat': opts['hasMeat'],
        'has-ceral': opts['hasCeral'],
        'has-alcohol': opts['hasAlcohol'],
        'sweet-food': opts['sweetFood'],
        'savory-food': opts['savoryFood'],
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-nutrition-per-portion': opts['includeNutritionPerPortion'],
        'include-gda': opts['includeGda'],
        'include-food-names': opts['includeFoodNames'],
        'include-food-id': opts['includeFoodId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sortby': opts['sortby'],
        'sortdir': opts['sortdir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Recipe];

      return this.apiClient.callApi(
        '/recipe/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRecipesByFoodIdsWithNutrition operation.
     * @callback module:api/RecipeApi~searchRecipesByFoodIdsWithNutritionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recipe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for recipes with particular ingredients
     * @param {String} foodIds A comma separated list of food IDs which each recipe MUST contain.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Search the recipe name, used as a wild card on the name column like so; &#39;%name%&#39;
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included?
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included?
     * @param {Integer} opts.offset The offset into search results.
     * @param {Integer} opts.limit Limit the number of results returned.
     * @param {String} opts.sortby The nutrition field to sort by. (default to calories)
     * @param {String} opts.sortdir The sort direction for the results. (default to desc)
     * @param {module:api/RecipeApi~searchRecipesByFoodIdsWithNutritionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recipe>}
     */
    this.searchRecipesByFoodIdsWithNutrition = function(foodIds, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'foodIds' is set
      if (foodIds == undefined || foodIds == null) {
        throw "Missing the required parameter 'foodIds' when calling searchRecipesByFoodIdsWithNutrition";
      }


      var pathParams = {
        'foodIds': foodIds
      };
      var queryParams = {
        'name': opts['name'],
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-food-names': opts['includeFoodNames'],
        'include-foodId': opts['includeFoodId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sortby': opts['sortby'],
        'sortdir': opts['sortdir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Recipe];

      return this.apiClient.callApi(
        '/recipe/search-by-food-id/{foodIds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
