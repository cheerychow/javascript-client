/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HttpAPIError', 'model/FoodDes', 'model/FoodGroup', 'model/PopularFood', 'model/IngredientFood'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HttpAPIError'), require('../model/FoodDes'), require('../model/FoodGroup'), require('../model/PopularFood'), require('../model/IngredientFood'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.FoodApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.FoodDes, root.CheeryChowRecipeApi.FoodGroup, root.CheeryChowRecipeApi.PopularFood, root.CheeryChowRecipeApi.IngredientFood);
  }
}(this, function(ApiClient, HttpAPIError, FoodDes, FoodGroup, PopularFood, IngredientFood) {
  'use strict';

  /**
   * Food service.
   * @module api/FoodApi
   * @version 0.0.2
   */

  /**
   * Constructs a new FoodApi. 
   * @alias module:api/FoodApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the foodWeight operation.
     * @callback module:api/FoodApi~foodWeightCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the measured food proportions for a particular food.
     * @param {Integer} foodId Food id which you want a list of known foods weights for
     * @param {module:api/FoodApi~foodWeightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.foodWeight = function(foodId, callback) {
      var postBody = null;

      // verify the required parameter 'foodId' is set
      if (foodId == undefined || foodId == null) {
        throw "Missing the required parameter 'foodId' when calling foodWeight";
      }


      var pathParams = {
        'foodId': foodId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/food/{foodId}/weights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the foodWeightNames operation.
     * @callback module:api/FoodApi~foodWeightNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Weights of typical measurements
     * @param {Integer} foodId Food id which you want a list of known foods weights for
     * @param {module:api/FoodApi~foodWeightNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.foodWeightNames = function(foodId, callback) {
      var postBody = null;

      // verify the required parameter 'foodId' is set
      if (foodId == undefined || foodId == null) {
        throw "Missing the required parameter 'foodId' when calling foodWeightNames";
      }


      var pathParams = {
        'foodId': foodId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/food/{foodId}/weightnames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFoods operation.
     * @callback module:api/FoodApi~getFoodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FoodDes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List similar foods
     * @param {Integer} foodId The Food ID of the food object you want to fetch
     * @param {module:api/FoodApi~getFoodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FoodDes}
     */
    this.getFoods = function(foodId, callback) {
      var postBody = null;

      // verify the required parameter 'foodId' is set
      if (foodId == undefined || foodId == null) {
        throw "Missing the required parameter 'foodId' when calling getFoods";
      }


      var pathParams = {
        'foodId': foodId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FoodDes;

      return this.apiClient.callApi(
        '/food/{foodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFoodGroups operation.
     * @callback module:api/FoodApi~listFoodGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FoodGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of the food groups
     * @param {module:api/FoodApi~listFoodGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FoodGroup>}
     */
    this.listFoodGroups = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FoodGroup];

      return this.apiClient.callApi(
        '/food/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the popularFoods operation.
     * @callback module:api/FoodApi~popularFoodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PopularFood>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of the most popular ingredients as food objects
     * @param {module:api/FoodApi~popularFoodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PopularFood>}
     */
    this.popularFoods = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PopularFood];

      return this.apiClient.callApi(
        '/food/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAvailableIngredient operation.
     * @callback module:api/FoodApi~searchAvailableIngredientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IngredientFood>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search through the known ingredients in the database
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm The search term to use when searching through ingredient names
     * @param {module:api/FoodApi~searchAvailableIngredientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IngredientFood>}
     */
    this.searchAvailableIngredient = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search-term': opts['searchTerm']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [IngredientFood];

      return this.apiClient.callApi(
        '/food/ingredients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFoods operation.
     * @callback module:api/FoodApi~searchFoodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FoodDes>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Plain english search for foods.
     * @param {String} searchTerm A search term for searching for foods.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.offset The offset into search results.
     * @param {Integer} opts.limit Limit the number of results returned.
     * @param {module:api/FoodApi~searchFoodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FoodDes>}
     */
    this.searchFoods = function(searchTerm, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchTerm' is set
      if (searchTerm == undefined || searchTerm == null) {
        throw "Missing the required parameter 'searchTerm' when calling searchFoods";
      }


      var pathParams = {
        'searchTerm': searchTerm
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FoodDes];

      return this.apiClient.callApi(
        '/food/search/{searchTerm}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
