/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserMeta', 'model/HttpAPIError', 'model/RecipeserverBasicauthSuggestUser', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserMeta'), require('../model/HttpAPIError'), require('../model/RecipeserverBasicauthSuggestUser'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.UserApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.UserMeta, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.RecipeserverBasicauthSuggestUser, root.CheeryChowRecipeApi.User);
  }
}(this, function(ApiClient, UserMeta, HttpAPIError, RecipeserverBasicauthSuggestUser, User) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 0.0.2
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getUserMetaInfo operation.
     * @callback module:api/UserApi~getUserMetaInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserMeta>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a user&#39;s meta fields.
     * @param {String} fields A comma deliminated list of meta keys
     * @param {module:api/UserApi~getUserMetaInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserMeta>}
     */
    this.getUserMetaInfo = function(fields, callback) {
      var postBody = null;

      // verify the required parameter 'fields' is set
      if (fields == undefined || fields == null) {
        throw "Missing the required parameter 'fields' when calling getUserMetaInfo";
      }


      var pathParams = {
        'fields': fields
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserMeta];

      return this.apiClient.callApi(
        '/user_meta/{fields}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUserInfo operation.
     * @callback module:api/UserApi~saveUserInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save changes to the user object.
     * @param {Integer} userId The ID of the user to which is to be changed.
     * @param {module:model/RecipeserverBasicauthSuggestUser} suggestedUser A user object containing the changes to be made.
     * @param {module:api/UserApi~saveUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveUserInfo = function(userId, suggestedUser, callback) {
      var postBody = suggestedUser;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling saveUserInfo";
      }

      // verify the required parameter 'suggestedUser' is set
      if (suggestedUser == undefined || suggestedUser == null) {
        throw "Missing the required parameter 'suggestedUser' when calling saveUserInfo";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUserMetaInfo operation.
     * @callback module:api/UserApi~saveUserMetaInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save changes to the user object.
     * @param {Integer} userId The ID of the user to which the user-meta is to be added to
     * @param {module:model/UserMeta} body A user object containing the changes to be made.
     * @param {module:api/UserApi~saveUserMetaInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveUserMetaInfo = function(userId, body, callback) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling saveUserMetaInfo";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling saveUserMetaInfo";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user-meta/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
