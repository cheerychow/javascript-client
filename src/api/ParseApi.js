/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Recipe', 'model/HttpAPIError', 'model/PlainString', 'model/RecipeParseRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Recipe'), require('../model/HttpAPIError'), require('../model/PlainString'), require('../model/RecipeParseRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.ParseApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.Recipe, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.PlainString, root.CheeryChowRecipeApi.RecipeParseRequest);
  }
}(this, function(ApiClient, Recipe, HttpAPIError, PlainString, RecipeParseRequest) {
  'use strict';

  /**
   * Parse service.
   * @module api/ParseApi
   * @version 0.0.2
   */

  /**
   * Constructs a new ParseApi. 
   * @alias module:api/ParseApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the parsePlainTextIngredientLinesRequest operation.
     * @callback module:api/ParseApi~parsePlainTextIngredientLinesRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of ingredients and nutritional info.
     * @param {Array.<module:model/String>} ingredients A JSON array of plain english ingredients.
     * @param {Object} opts Optional parameters
     * @param {String} opts.country The country code which the RDA should reflect. (default to uk)
     * @param {String} opts.gender The gender for which the RDA should apply. (default to male)
     * @param {module:api/ParseApi~parsePlainTextIngredientLinesRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.parsePlainTextIngredientLinesRequest = function(ingredients, opts, callback) {
      opts = opts || {};
      var postBody = ingredients;

      // verify the required parameter 'ingredients' is set
      if (ingredients == undefined || ingredients == null) {
        throw "Missing the required parameter 'ingredients' when calling parsePlainTextIngredientLinesRequest";
      }


      var pathParams = {
      };
      var queryParams = {
        'country': opts['country'],
        'gender': opts['gender']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/parse/ingredients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the parseRecipeByUrlGet operation.
     * @callback module:api/ParseApi~parseRecipeByUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a URL of a recipe on the internet, a sous bot will parse it (if it can), and then spit out a recipe object as the result.
     * @param {String} recipeUrl A url to a recipe, which a sous bot will download and attempt, as best it can to parse into a recipe object and a list of ingredients.
     * @param {module:api/ParseApi~parseRecipeByUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.parseRecipeByUrlGet = function(recipeUrl, callback) {
      var postBody = null;

      // verify the required parameter 'recipeUrl' is set
      if (recipeUrl == undefined || recipeUrl == null) {
        throw "Missing the required parameter 'recipeUrl' when calling parseRecipeByUrlGet";
      }


      var pathParams = {
        'recipe-url': recipeUrl
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/parse/via-url/recipe/{recipe-url}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the parseRecipeByUrlPost operation.
     * @callback module:api/ParseApi~parseRecipeByUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a URL of a recipe on the internet, a sous bot will parse it (if it can), and then spit out a recipe object as the result.
     * @param {module:model/PlainString} recipeurl A url to a recipe, which a sous bot will download and attempt, as best it can to parse into a recipe object and a list of ingredients.
     * @param {module:api/ParseApi~parseRecipeByUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.parseRecipeByUrlPost = function(recipeurl, callback) {
      var postBody = recipeurl;

      // verify the required parameter 'recipeurl' is set
      if (recipeurl == undefined || recipeurl == null) {
        throw "Missing the required parameter 'recipeurl' when calling parseRecipeByUrlPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/parse/via-url/recipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the parseRecipeViaPageContent operation.
     * @callback module:api/ParseApi~parseRecipeViaPageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a URL of a recipe on the internet, a sous bot will parse it (if it can), and then spit out a recipe object as the result.
     * @param {module:model/RecipeParseRequest} recipeParseRequest An object describing a recipe to be parsed into seperate ingredients.
     * @param {module:api/ParseApi~parseRecipeViaPageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.parseRecipeViaPageContent = function(recipeParseRequest, callback) {
      var postBody = recipeParseRequest;

      // verify the required parameter 'recipeParseRequest' is set
      if (recipeParseRequest == undefined || recipeParseRequest == null) {
        throw "Missing the required parameter 'recipeParseRequest' when calling parseRecipeViaPageContent";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/parse/via-page-content/recipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
