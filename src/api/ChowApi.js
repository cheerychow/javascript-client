/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Recipe', 'model/HttpAPIError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Recipe'), require('../model/HttpAPIError'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.ChowApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.Recipe, root.CheeryChowRecipeApi.HttpAPIError);
  }
}(this, function(ApiClient, Recipe, HttpAPIError) {
  'use strict';

  /**
   * Chow service.
   * @module api/ChowApi
   * @version 0.0.2
   */

  /**
   * Constructs a new ChowApi. 
   * @alias module:api/ChowApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRecipeByUniqueHandle operation.
     * @callback module:api/ChowApi~getRecipeByUniqueHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular recipe via a unique name and index
     * @param {String} recipeName The recipe&#39;s unique handle; a name and a number seperated by a forward slash.
     * @param {Integer} recipeNameIndex An index to differentiate recipes with the same name.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included?
     * @param {Boolean} opts.includeNutritionPerPortion Should the recipe&#39;s nutrition per portion be included?
     * @param {Boolean} opts.includeGda Should the general daily provision for the recipe be included?
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name.)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included?
     * @param {module:api/ChowApi~getRecipeByUniqueHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.getRecipeByUniqueHandle = function(recipeName, recipeNameIndex, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'recipeName' is set
      if (recipeName == undefined || recipeName == null) {
        throw "Missing the required parameter 'recipeName' when calling getRecipeByUniqueHandle";
      }

      // verify the required parameter 'recipeNameIndex' is set
      if (recipeNameIndex == undefined || recipeNameIndex == null) {
        throw "Missing the required parameter 'recipeNameIndex' when calling getRecipeByUniqueHandle";
      }


      var pathParams = {
        'recipeName': recipeName,
        'recipeNameIndex': recipeNameIndex
      };
      var queryParams = {
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-nutrition-per-portion': opts['includeNutritionPerPortion'],
        'include-gda': opts['includeGda'],
        'include-food-names': opts['includeFoodNames'],
        'include-foodId': opts['includeFoodId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/chow/{recipeName}/{recipeNameIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuperRecipeByUniqueHandle operation.
     * @callback module:api/ChowApi~getSuperRecipeByUniqueHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular recipe via a unique name and index
     * @param {String} recipename The recipe&#39;s unique name
     * @param {Integer} recipenameindex An index to differentiate recipe&#39;s with the same name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Should the recipe&#39;s nutrition field be populated? (default to false)
     * @param {Boolean} opts.includeCommonNames Should the recipe&#39;s ingredient common names be included? (default to false)
     * @param {Boolean} opts.includeNutritionPerPortion Should the recipe&#39;s nutrition per portion be included? (default to false)
     * @param {Boolean} opts.includeGda Should the general daily provision for the recipe be included? (default to false)
     * @param {Boolean} opts.includeFoodNames Should the recipe&#39;s ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name) (default to false)
     * @param {Boolean} opts.includeFoodId Should the recipe&#39;s ingredient food id&#39;s be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name. (default to false)
     * @param {module:api/ChowApi~getSuperRecipeByUniqueHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    this.getSuperRecipeByUniqueHandle = function(recipename, recipenameindex, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'recipename' is set
      if (recipename == undefined || recipename == null) {
        throw "Missing the required parameter 'recipename' when calling getSuperRecipeByUniqueHandle";
      }

      // verify the required parameter 'recipenameindex' is set
      if (recipenameindex == undefined || recipenameindex == null) {
        throw "Missing the required parameter 'recipenameindex' when calling getSuperRecipeByUniqueHandle";
      }


      var pathParams = {
        'recipename': recipename,
        'recipenameindex': recipenameindex
      };
      var queryParams = {
        'include-nutrition': opts['includeNutrition'],
        'include-common-names': opts['includeCommonNames'],
        'include-nutrition-per-portion': opts['includeNutritionPerPortion'],
        'include-gda': opts['includeGda'],
        'include-food-names': opts['includeFoodNames'],
        'include-food-id': opts['includeFoodId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Recipe;

      return this.apiClient.callApi(
        '/super-chow/{recipename}/{recipenameindex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
