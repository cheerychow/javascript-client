/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HttpAPIError', 'model/RecipeGroup', 'model/RecipeGroupInserter', 'model/RecipesAndRecipeGroups'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HttpAPIError'), require('../model/RecipeGroup'), require('../model/RecipeGroupInserter'), require('../model/RecipesAndRecipeGroups'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.RecipegroupApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.RecipeGroup, root.CheeryChowRecipeApi.RecipeGroupInserter, root.CheeryChowRecipeApi.RecipesAndRecipeGroups);
  }
}(this, function(ApiClient, HttpAPIError, RecipeGroup, RecipeGroupInserter, RecipesAndRecipeGroups) {
  'use strict';

  /**
   * Recipegroup service.
   * @module api/RecipegroupApi
   * @version 0.0.2
   */

  /**
   * Constructs a new RecipegroupApi. 
   * @alias module:api/RecipegroupApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteRecipeGroup operation.
     * @callback module:api/RecipegroupApi~deleteRecipeGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a recipe group. WARNING. Deleteing a group results in all of the recipe group&#39;s child menu item&#39;s being deleted too.
     * @param {Integer} recipeGroupId Rating out of 5
     * @param {module:api/RecipegroupApi~deleteRecipeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeGroup}
     */
    this.deleteRecipeGroup = function(recipeGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeGroupId' is set
      if (recipeGroupId == undefined || recipeGroupId == null) {
        throw "Missing the required parameter 'recipeGroupId' when calling deleteRecipeGroup";
      }


      var pathParams = {
        'recipeGroupId': recipeGroupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeGroup;

      return this.apiClient.callApi(
        '/recipe-group/{recipeGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeGroups operation.
     * @callback module:api/RecipegroupApi~getRecipeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecipeGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate a recipe out of 5
     * @param {module:api/RecipegroupApi~getRecipeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecipeGroup>}
     */
    this.getRecipeGroups = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RecipeGroup];

      return this.apiClient.callApi(
        '/recipe-group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleRecipeGroup operation.
     * @callback module:api/RecipegroupApi~getSingleRecipeGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate a recipe out of 5
     * @param {Integer} recipeGroupId The group ID required
     * @param {module:api/RecipegroupApi~getSingleRecipeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeGroup}
     */
    this.getSingleRecipeGroup = function(recipeGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeGroupId' is set
      if (recipeGroupId == undefined || recipeGroupId == null) {
        throw "Missing the required parameter 'recipeGroupId' when calling getSingleRecipeGroup";
      }


      var pathParams = {
        'recipeGroupId': recipeGroupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeGroup;

      return this.apiClient.callApi(
        '/recipe-group/{recipeGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postRecipeGroup operation.
     * @callback module:api/RecipegroupApi~postRecipeGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new recipe group
     * @param {module:model/RecipeGroupInserter} recipeGroup The recipe group data. Some additional paramaters are provide finer control over the recipe group insertion. Such as overwriting a previous slug, making sure only one ever exists, or is inserted 
     * @param {module:api/RecipegroupApi~postRecipeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeGroup}
     */
    this.postRecipeGroup = function(recipeGroup, callback) {
      var postBody = recipeGroup;

      // verify the required parameter 'recipeGroup' is set
      if (recipeGroup == undefined || recipeGroup == null) {
        throw "Missing the required parameter 'recipeGroup' when calling postRecipeGroup";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeGroup;

      return this.apiClient.callApi(
        '/recipe-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecipeGroup operation.
     * @callback module:api/RecipegroupApi~putRecipeGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate a recipe out of 5
     * @param {module:model/RecipeGroup} recipeGroup Rating out of 5
     * @param {module:api/RecipegroupApi~putRecipeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeGroup}
     */
    this.putRecipeGroup = function(recipeGroup, callback) {
      var postBody = recipeGroup;

      // verify the required parameter 'recipeGroup' is set
      if (recipeGroup == undefined || recipeGroup == null) {
        throw "Missing the required parameter 'recipeGroup' when calling putRecipeGroup";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeGroup;

      return this.apiClient.callApi(
        '/recipe-group/{recipeGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMyRecipeGroupForRecipe operation.
     * @callback module:api/RecipegroupApi~searchMyRecipeGroupForRecipeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecipesAndRecipeGroups>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the logged in user&#39;s recipe groups for a particular recipe.
     * @param {Integer} recipeId The recipe ID to fetch
     * @param {module:api/RecipegroupApi~searchMyRecipeGroupForRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecipesAndRecipeGroups>}
     */
    this.searchMyRecipeGroupForRecipe = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling searchMyRecipeGroupForRecipe";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RecipesAndRecipeGroups];

      return this.apiClient.callApi(
        '/recipe-group/my-recipes/{recipeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
