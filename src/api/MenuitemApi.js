/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HttpAPIError', 'model/MenuItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HttpAPIError'), require('../model/MenuItem'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.MenuitemApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.MenuItem);
  }
}(this, function(ApiClient, HttpAPIError, MenuItem) {
  'use strict';

  /**
   * Menuitem service.
   * @module api/MenuitemApi
   * @version 0.0.2
   */

  /**
   * Constructs a new MenuitemApi. 
   * @alias module:api/MenuitemApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteMenuItem operation.
     * @callback module:api/MenuitemApi~deleteMenuItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MenuItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a menu item
     * @param {Integer} menuItemId The primary key of the menu item to be deleted.
     * @param {module:api/MenuitemApi~deleteMenuItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MenuItem}
     */
    this.deleteMenuItem = function(menuItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuItemId' is set
      if (menuItemId == undefined || menuItemId == null) {
        throw "Missing the required parameter 'menuItemId' when calling deleteMenuItem";
      }


      var pathParams = {
        'menuItemId': menuItemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MenuItem;

      return this.apiClient.callApi(
        '/menu-item/{menuItemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemsInRecipeGroup operation.
     * @callback module:api/MenuitemApi~getMenuItemsInRecipeGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MenuItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the menu items in the recipe group
     * @param {Integer} recipeGroupId The group ID required
     * @param {module:api/MenuitemApi~getMenuItemsInRecipeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MenuItem>}
     */
    this.getMenuItemsInRecipeGroup = function(recipeGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeGroupId' is set
      if (recipeGroupId == undefined || recipeGroupId == null) {
        throw "Missing the required parameter 'recipeGroupId' when calling getMenuItemsInRecipeGroup";
      }


      var pathParams = {
        'recipeGroupId': recipeGroupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MenuItem];

      return this.apiClient.callApi(
        '/recipe-groups/{recipeGroupId}/menu-items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleMenuItem operation.
     * @callback module:api/MenuitemApi~getSingleMenuItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MenuItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single menu item by it&#39;s primary key.
     * @param {Integer} menuItemId The id of the menu item to be fetched.
     * @param {module:api/MenuitemApi~getSingleMenuItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MenuItem}
     */
    this.getSingleMenuItem = function(menuItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuItemId' is set
      if (menuItemId == undefined || menuItemId == null) {
        throw "Missing the required parameter 'menuItemId' when calling getSingleMenuItem";
      }


      var pathParams = {
        'menuItemId': menuItemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MenuItem;

      return this.apiClient.callApi(
        '/menu-item/{menuItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postMenuItem operation.
     * @callback module:api/MenuitemApi~postMenuItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MenuItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate a recipe out of 5
     * @param {Integer} recipeGroupId The group ID required
     * @param {module:model/MenuItem} menuItem The recipe group data. Some additional paramaters are provide finer control over the recipe group insertion. Such as overwriting a previous slug, making sure only one ever exists, or is inserted 
     * @param {module:api/MenuitemApi~postMenuItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MenuItem}
     */
    this.postMenuItem = function(recipeGroupId, menuItem, callback) {
      var postBody = menuItem;

      // verify the required parameter 'recipeGroupId' is set
      if (recipeGroupId == undefined || recipeGroupId == null) {
        throw "Missing the required parameter 'recipeGroupId' when calling postMenuItem";
      }

      // verify the required parameter 'menuItem' is set
      if (menuItem == undefined || menuItem == null) {
        throw "Missing the required parameter 'menuItem' when calling postMenuItem";
      }


      var pathParams = {
        'recipeGroupId': recipeGroupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MenuItem;

      return this.apiClient.callApi(
        '/recipe-groups/{recipeGroupId}/menu-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putMenuItem operation.
     * @callback module:api/MenuitemApi~putMenuItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MenuItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make changes to a menu item already in the database
     * @param {Integer} menuItemId The menu item ID of the item you want to change.
     * @param {module:model/MenuItem} theMenuItem The menu item data to be changed.
     * @param {module:api/MenuitemApi~putMenuItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MenuItem}
     */
    this.putMenuItem = function(menuItemId, theMenuItem, callback) {
      var postBody = theMenuItem;

      // verify the required parameter 'menuItemId' is set
      if (menuItemId == undefined || menuItemId == null) {
        throw "Missing the required parameter 'menuItemId' when calling putMenuItem";
      }

      // verify the required parameter 'theMenuItem' is set
      if (theMenuItem == undefined || theMenuItem == null) {
        throw "Missing the required parameter 'theMenuItem' when calling putMenuItem";
      }


      var pathParams = {
        'menuItemId': menuItemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MenuItem;

      return this.apiClient.callApi(
        '/menu-item/{menuItemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
