/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RecipeserverBasicauthHttpAPIResponse', 'model/HttpAPIError', 'model/RecipeRating', 'model/AvgTotal'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RecipeserverBasicauthHttpAPIResponse'), require('../model/HttpAPIError'), require('../model/RecipeRating'), require('../model/AvgTotal'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.RaterecipeApi = factory(root.CheeryChowRecipeApi.ApiClient, root.CheeryChowRecipeApi.RecipeserverBasicauthHttpAPIResponse, root.CheeryChowRecipeApi.HttpAPIError, root.CheeryChowRecipeApi.RecipeRating, root.CheeryChowRecipeApi.AvgTotal);
  }
}(this, function(ApiClient, RecipeserverBasicauthHttpAPIResponse, HttpAPIError, RecipeRating, AvgTotal) {
  'use strict';

  /**
   * Raterecipe service.
   * @module api/RaterecipeApi
   * @version 0.0.2
   */

  /**
   * Constructs a new RaterecipeApi. 
   * @alias module:api/RaterecipeApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteARecipeRating operation.
     * @callback module:api/RaterecipeApi~deleteARecipeRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeserverBasicauthHttpAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a recipe rating
     * @param {Integer} ratingId The id of the rating object you want to delete
     * @param {module:api/RaterecipeApi~deleteARecipeRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeserverBasicauthHttpAPIResponse}
     */
    this.deleteARecipeRating = function(ratingId, callback) {
      var postBody = null;

      // verify the required parameter 'ratingId' is set
      if (ratingId == undefined || ratingId == null) {
        throw "Missing the required parameter 'ratingId' when calling deleteARecipeRating";
      }


      var pathParams = {
        'ratingId': ratingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeserverBasicauthHttpAPIResponse;

      return this.apiClient.callApi(
        '/rate-recipe/{ratingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyRecipeRatingByRatingID operation.
     * @callback module:api/RaterecipeApi~getMyRecipeRatingByRatingIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get currently logged in users rating for a recipe, by it&#39;s id
     * @param {Integer} ratingId The id of the rating.
     * @param {module:api/RaterecipeApi~getMyRecipeRatingByRatingIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeRating}
     */
    this.getMyRecipeRatingByRatingID = function(ratingId, callback) {
      var postBody = null;

      // verify the required parameter 'ratingId' is set
      if (ratingId == undefined || ratingId == null) {
        throw "Missing the required parameter 'ratingId' when calling getMyRecipeRatingByRatingID";
      }


      var pathParams = {
        'ratingId': ratingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeRating;

      return this.apiClient.callApi(
        '/rate-recipe/my-rating-by-id/{ratingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyRecipeRatingByRecipeId operation.
     * @callback module:api/RaterecipeApi~getMyRecipeRatingByRecipeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get currently logged in users rating for a recipe, by recipe url
     * @param {Number} recipeId The url of the recipe, if it&#39;s already in the database.
     * @param {module:api/RaterecipeApi~getMyRecipeRatingByRecipeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeRating}
     */
    this.getMyRecipeRatingByRecipeId = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getMyRecipeRatingByRecipeId";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeRating;

      return this.apiClient.callApi(
        '/rate-recipe/my-rating-by-recipe-id/{recipeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyRecipeRatingByUrl operation.
     * @callback module:api/RaterecipeApi~getMyRecipeRatingByUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get currently logged in users rating for a recipe, by recipe url
     * @param {String} url The url of the recipe, if it&#39;s already in the database.
     * @param {module:api/RaterecipeApi~getMyRecipeRatingByUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeRating}
     */
    this.getMyRecipeRatingByUrl = function(url, callback) {
      var postBody = null;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw "Missing the required parameter 'url' when calling getMyRecipeRatingByUrl";
      }


      var pathParams = {
        'url': url
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeRating;

      return this.apiClient.callApi(
        '/rate-recipe/my-rating-by-url/{url}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeRatingByRecipeID operation.
     * @callback module:api/RaterecipeApi~getRecipeRatingByRecipeIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvgTotal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the rating for a recipe, by it&#39;s id
     * @param {Integer} recipeId The id of the recipe, if it&#39;s already in the database.
     * @param {module:api/RaterecipeApi~getRecipeRatingByRecipeIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvgTotal}
     */
    this.getRecipeRatingByRecipeID = function(recipeId, callback) {
      var postBody = null;

      // verify the required parameter 'recipeId' is set
      if (recipeId == undefined || recipeId == null) {
        throw "Missing the required parameter 'recipeId' when calling getRecipeRatingByRecipeID";
      }


      var pathParams = {
        'recipeId': recipeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AvgTotal;

      return this.apiClient.callApi(
        '/rate-recipe/by-id/{recipeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecipeRatingByUrl operation.
     * @callback module:api/RaterecipeApi~getRecipeRatingByUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvgTotal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the aggregate rating for a recipe, by it&#39;s url
     * @param {String} url The url of the recipe you want to rate.
     * @param {module:api/RaterecipeApi~getRecipeRatingByUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvgTotal}
     */
    this.getRecipeRatingByUrl = function(url, callback) {
      var postBody = null;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw "Missing the required parameter 'url' when calling getRecipeRatingByUrl";
      }


      var pathParams = {
        'url': url
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AvgTotal;

      return this.apiClient.callApi(
        '/rate-recipe/by-url/{url}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rateARecipe operation.
     * @callback module:api/RaterecipeApi~rateARecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rate a recipe out of 5
     * @param {module:model/RecipeRating} recipeRating Rating out of 5
     * @param {module:api/RaterecipeApi~rateARecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeRating}
     */
    this.rateARecipe = function(recipeRating, callback) {
      var postBody = recipeRating;

      // verify the required parameter 'recipeRating' is set
      if (recipeRating == undefined || recipeRating == null) {
        throw "Missing the required parameter 'recipeRating' when calling rateARecipe";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['chow_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RecipeRating;

      return this.apiClient.callApi(
        '/rate-recipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
