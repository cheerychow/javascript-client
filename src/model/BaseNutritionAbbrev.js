/**
 * Cheery Chow Recipe API
 * Nutrition and recipe nutrition management API.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: john@cheerychow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CheeryChowRecipeApi) {
      root.CheeryChowRecipeApi = {};
    }
    root.CheeryChowRecipeApi.BaseNutritionAbbrev = factory(root.CheeryChowRecipeApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The BaseNutritionAbbrev model module.
   * @module model/BaseNutritionAbbrev
   * @version 0.0.2
   */

  /**
   * Constructs a new <code>BaseNutritionAbbrev</code>.
   * @alias module:model/BaseNutritionAbbrev
   * @class
   */
  var exports = function() {
    var _this = this;























































  };

  /**
   * Constructs a <code>BaseNutritionAbbrev</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BaseNutritionAbbrev} obj Optional instance to populate.
   * @return {module:model/BaseNutritionAbbrev} The populated <code>BaseNutritionAbbrev</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('alpha_carot')) {
        obj['alpha_carot'] = ApiClient.convertToType(data['alpha_carot'], 'Number');
      }
      if (data.hasOwnProperty('ash')) {
        obj['ash'] = ApiClient.convertToType(data['ash'], 'Number');
      }
      if (data.hasOwnProperty('beta_carot')) {
        obj['beta_carot'] = ApiClient.convertToType(data['beta_carot'], 'Number');
      }
      if (data.hasOwnProperty('beta_crypt')) {
        obj['beta_crypt'] = ApiClient.convertToType(data['beta_crypt'], 'Number');
      }
      if (data.hasOwnProperty('bioton')) {
        obj['bioton'] = ApiClient.convertToType(data['bioton'], 'Number');
      }
      if (data.hasOwnProperty('calcium')) {
        obj['calcium'] = ApiClient.convertToType(data['calcium'], 'Number');
      }
      if (data.hasOwnProperty('calories')) {
        obj['calories'] = ApiClient.convertToType(data['calories'], 'Number');
      }
      if (data.hasOwnProperty('carbs')) {
        obj['carbs'] = ApiClient.convertToType(data['carbs'], 'Number');
      }
      if (data.hasOwnProperty('chloride')) {
        obj['chloride'] = ApiClient.convertToType(data['chloride'], 'Number');
      }
      if (data.hasOwnProperty('cholestrl')) {
        obj['cholestrl'] = ApiClient.convertToType(data['cholestrl'], 'Number');
      }
      if (data.hasOwnProperty('choline')) {
        obj['choline'] = ApiClient.convertToType(data['choline'], 'Number');
      }
      if (data.hasOwnProperty('choline_tot')) {
        obj['choline_tot'] = ApiClient.convertToType(data['choline_tot'], 'Number');
      }
      if (data.hasOwnProperty('chromium')) {
        obj['chromium'] = ApiClient.convertToType(data['chromium'], 'Number');
      }
      if (data.hasOwnProperty('copper')) {
        obj['copper'] = ApiClient.convertToType(data['copper'], 'Number');
      }
      if (data.hasOwnProperty('fiber_td')) {
        obj['fiber_td'] = ApiClient.convertToType(data['fiber_td'], 'Number');
      }
      if (data.hasOwnProperty('fluoride')) {
        obj['fluoride'] = ApiClient.convertToType(data['fluoride'], 'Number');
      }
      if (data.hasOwnProperty('folate_dfe')) {
        obj['folate_dfe'] = ApiClient.convertToType(data['folate_dfe'], 'Number');
      }
      if (data.hasOwnProperty('folate_tot')) {
        obj['folate_tot'] = ApiClient.convertToType(data['folate_tot'], 'Number');
      }
      if (data.hasOwnProperty('folic_acid')) {
        obj['folic_acid'] = ApiClient.convertToType(data['folic_acid'], 'Number');
      }
      if (data.hasOwnProperty('food_folate')) {
        obj['food_folate'] = ApiClient.convertToType(data['food_folate'], 'Number');
      }
      if (data.hasOwnProperty('food_weight')) {
        obj['food_weight'] = ApiClient.convertToType(data['food_weight'], 'Number');
      }
      if (data.hasOwnProperty('iodine')) {
        obj['iodine'] = ApiClient.convertToType(data['iodine'], 'Number');
      }
      if (data.hasOwnProperty('iron')) {
        obj['iron'] = ApiClient.convertToType(data['iron'], 'Number');
      }
      if (data.hasOwnProperty('lut_zea')) {
        obj['lut_zea'] = ApiClient.convertToType(data['lut_zea'], 'Number');
      }
      if (data.hasOwnProperty('lycopene')) {
        obj['lycopene'] = ApiClient.convertToType(data['lycopene'], 'Number');
      }
      if (data.hasOwnProperty('magnesium')) {
        obj['magnesium'] = ApiClient.convertToType(data['magnesium'], 'Number');
      }
      if (data.hasOwnProperty('manganese')) {
        obj['manganese'] = ApiClient.convertToType(data['manganese'], 'Number');
      }
      if (data.hasOwnProperty('molybdenum')) {
        obj['molybdenum'] = ApiClient.convertToType(data['molybdenum'], 'Number');
      }
      if (data.hasOwnProperty('mono_fat')) {
        obj['mono_fat'] = ApiClient.convertToType(data['mono_fat'], 'Number');
      }
      if (data.hasOwnProperty('phosphorus')) {
        obj['phosphorus'] = ApiClient.convertToType(data['phosphorus'], 'Number');
      }
      if (data.hasOwnProperty('poly_fat')) {
        obj['poly_fat'] = ApiClient.convertToType(data['poly_fat'], 'Number');
      }
      if (data.hasOwnProperty('potassium')) {
        obj['potassium'] = ApiClient.convertToType(data['potassium'], 'Number');
      }
      if (data.hasOwnProperty('protein')) {
        obj['protein'] = ApiClient.convertToType(data['protein'], 'Number');
      }
      if (data.hasOwnProperty('retinol')) {
        obj['retinol'] = ApiClient.convertToType(data['retinol'], 'Number');
      }
      if (data.hasOwnProperty('sat_fat')) {
        obj['sat_fat'] = ApiClient.convertToType(data['sat_fat'], 'Number');
      }
      if (data.hasOwnProperty('selenium')) {
        obj['selenium'] = ApiClient.convertToType(data['selenium'], 'Number');
      }
      if (data.hasOwnProperty('sodium')) {
        obj['sodium'] = ApiClient.convertToType(data['sodium'], 'Number');
      }
      if (data.hasOwnProperty('total_fat')) {
        obj['total_fat'] = ApiClient.convertToType(data['total_fat'], 'Number');
      }
      if (data.hasOwnProperty('total_sugar')) {
        obj['total_sugar'] = ApiClient.convertToType(data['total_sugar'], 'Number');
      }
      if (data.hasOwnProperty('vit_a_iu')) {
        obj['vit_a_iu'] = ApiClient.convertToType(data['vit_a_iu'], 'Number');
      }
      if (data.hasOwnProperty('vit_a_rae')) {
        obj['vit_a_rae'] = ApiClient.convertToType(data['vit_a_rae'], 'Number');
      }
      if (data.hasOwnProperty('vit_b1')) {
        obj['vit_b1'] = ApiClient.convertToType(data['vit_b1'], 'Number');
      }
      if (data.hasOwnProperty('vit_b12')) {
        obj['vit_b12'] = ApiClient.convertToType(data['vit_b12'], 'Number');
      }
      if (data.hasOwnProperty('vit_b2')) {
        obj['vit_b2'] = ApiClient.convertToType(data['vit_b2'], 'Number');
      }
      if (data.hasOwnProperty('vit_b3')) {
        obj['vit_b3'] = ApiClient.convertToType(data['vit_b3'], 'Number');
      }
      if (data.hasOwnProperty('vit_b5')) {
        obj['vit_b5'] = ApiClient.convertToType(data['vit_b5'], 'Number');
      }
      if (data.hasOwnProperty('vit_b6')) {
        obj['vit_b6'] = ApiClient.convertToType(data['vit_b6'], 'Number');
      }
      if (data.hasOwnProperty('vit_c')) {
        obj['vit_c'] = ApiClient.convertToType(data['vit_c'], 'Number');
      }
      if (data.hasOwnProperty('vit_d_iu')) {
        obj['vit_d_iu'] = ApiClient.convertToType(data['vit_d_iu'], 'Number');
      }
      if (data.hasOwnProperty('vit_d_mcg')) {
        obj['vit_d_mcg'] = ApiClient.convertToType(data['vit_d_mcg'], 'Number');
      }
      if (data.hasOwnProperty('vit_e')) {
        obj['vit_e'] = ApiClient.convertToType(data['vit_e'], 'Number');
      }
      if (data.hasOwnProperty('vit_k')) {
        obj['vit_k'] = ApiClient.convertToType(data['vit_k'], 'Number');
      }
      if (data.hasOwnProperty('water')) {
        obj['water'] = ApiClient.convertToType(data['water'], 'Number');
      }
      if (data.hasOwnProperty('zinc')) {
        obj['zinc'] = ApiClient.convertToType(data['zinc'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {Number} alpha_carot
   */
  exports.prototype['alpha_carot'] = undefined;
  /**
   * @member {Number} ash
   */
  exports.prototype['ash'] = undefined;
  /**
   * @member {Number} beta_carot
   */
  exports.prototype['beta_carot'] = undefined;
  /**
   * @member {Number} beta_crypt
   */
  exports.prototype['beta_crypt'] = undefined;
  /**
   * @member {Number} bioton
   */
  exports.prototype['bioton'] = undefined;
  /**
   * @member {Number} calcium
   */
  exports.prototype['calcium'] = undefined;
  /**
   * @member {Number} calories
   */
  exports.prototype['calories'] = undefined;
  /**
   * @member {Number} carbs
   */
  exports.prototype['carbs'] = undefined;
  /**
   * @member {Number} chloride
   */
  exports.prototype['chloride'] = undefined;
  /**
   * @member {Number} cholestrl
   */
  exports.prototype['cholestrl'] = undefined;
  /**
   * @member {Number} choline
   */
  exports.prototype['choline'] = undefined;
  /**
   * @member {Number} choline_tot
   */
  exports.prototype['choline_tot'] = undefined;
  /**
   * @member {Number} chromium
   */
  exports.prototype['chromium'] = undefined;
  /**
   * @member {Number} copper
   */
  exports.prototype['copper'] = undefined;
  /**
   * @member {Number} fiber_td
   */
  exports.prototype['fiber_td'] = undefined;
  /**
   * @member {Number} fluoride
   */
  exports.prototype['fluoride'] = undefined;
  /**
   * @member {Number} folate_dfe
   */
  exports.prototype['folate_dfe'] = undefined;
  /**
   * @member {Number} folate_tot
   */
  exports.prototype['folate_tot'] = undefined;
  /**
   * @member {Number} folic_acid
   */
  exports.prototype['folic_acid'] = undefined;
  /**
   * @member {Number} food_folate
   */
  exports.prototype['food_folate'] = undefined;
  /**
   * @member {Number} food_weight
   */
  exports.prototype['food_weight'] = undefined;
  /**
   * @member {Number} iodine
   */
  exports.prototype['iodine'] = undefined;
  /**
   * @member {Number} iron
   */
  exports.prototype['iron'] = undefined;
  /**
   * @member {Number} lut_zea
   */
  exports.prototype['lut_zea'] = undefined;
  /**
   * @member {Number} lycopene
   */
  exports.prototype['lycopene'] = undefined;
  /**
   * @member {Number} magnesium
   */
  exports.prototype['magnesium'] = undefined;
  /**
   * @member {Number} manganese
   */
  exports.prototype['manganese'] = undefined;
  /**
   * @member {Number} molybdenum
   */
  exports.prototype['molybdenum'] = undefined;
  /**
   * @member {Number} mono_fat
   */
  exports.prototype['mono_fat'] = undefined;
  /**
   * @member {Number} phosphorus
   */
  exports.prototype['phosphorus'] = undefined;
  /**
   * @member {Number} poly_fat
   */
  exports.prototype['poly_fat'] = undefined;
  /**
   * @member {Number} potassium
   */
  exports.prototype['potassium'] = undefined;
  /**
   * @member {Number} protein
   */
  exports.prototype['protein'] = undefined;
  /**
   * @member {Number} retinol
   */
  exports.prototype['retinol'] = undefined;
  /**
   * @member {Number} sat_fat
   */
  exports.prototype['sat_fat'] = undefined;
  /**
   * @member {Number} selenium
   */
  exports.prototype['selenium'] = undefined;
  /**
   * @member {Number} sodium
   */
  exports.prototype['sodium'] = undefined;
  /**
   * The total amount of fat present.
   * @member {Number} total_fat
   */
  exports.prototype['total_fat'] = undefined;
  /**
   * @member {Number} total_sugar
   */
  exports.prototype['total_sugar'] = undefined;
  /**
   * @member {Number} vit_a_iu
   */
  exports.prototype['vit_a_iu'] = undefined;
  /**
   * @member {Number} vit_a_rae
   */
  exports.prototype['vit_a_rae'] = undefined;
  /**
   * @member {Number} vit_b1
   */
  exports.prototype['vit_b1'] = undefined;
  /**
   * @member {Number} vit_b12
   */
  exports.prototype['vit_b12'] = undefined;
  /**
   * @member {Number} vit_b2
   */
  exports.prototype['vit_b2'] = undefined;
  /**
   * @member {Number} vit_b3
   */
  exports.prototype['vit_b3'] = undefined;
  /**
   * @member {Number} vit_b5
   */
  exports.prototype['vit_b5'] = undefined;
  /**
   * @member {Number} vit_b6
   */
  exports.prototype['vit_b6'] = undefined;
  /**
   * @member {Number} vit_c
   */
  exports.prototype['vit_c'] = undefined;
  /**
   * @member {Number} vit_d_iu
   */
  exports.prototype['vit_d_iu'] = undefined;
  /**
   * @member {Number} vit_d_mcg
   */
  exports.prototype['vit_d_mcg'] = undefined;
  /**
   * @member {Number} vit_e
   */
  exports.prototype['vit_e'] = undefined;
  /**
   * @member {Number} vit_k
   */
  exports.prototype['vit_k'] = undefined;
  /**
   * @member {Number} water
   */
  exports.prototype['water'] = undefined;
  /**
   * @member {Number} zinc
   */
  exports.prototype['zinc'] = undefined;



  return exports;
}));


